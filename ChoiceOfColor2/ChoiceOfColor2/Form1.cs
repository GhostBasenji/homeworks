// Программа меняет цвет фона формы 
// с ипользованием цикла foreach
using System.Windows.Forms;

namespace ChoiceOfColor2
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Получаем массив строк имен цветов из перечисления KnownColor.
            // Enum.GetNames возвращает массив имен констант указанном перечислении.
            // Удаление всех элементов из коллекции:
            listBox1.Items.Clear();
            // Добавляем имена всех цветов в список listBox1:
            foreach (string Color in Enum.GetNames(typeof(KnownColor)))
                if (Color != "Transparent") listBox1.Items.Add(Color);
            // Цвет Transparent является "прозрачным" 
            // Сортируем все цвета в списке в алфавитном порядке: 
            listBox1.Sorted = true;

        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.BackColor = Color.FromName(listBox1.Text);
            this.Text = "Цвет: " + listBox1.Text;
        }
    }
}

// Этот код написан более элегантно с использованием цикла foreach при заполнении списка формы именами всех цветов.

// Как видно из кода, во втором варианте цикл foreach обеспечивает заполнение списка элементов именами цветов в строковом представлении
// — кроме цвета Transparent, поэтому теперь его даже не надо "отсеивать" в процедуре обработки события изменения выбранного индекса. 

// ПОЯСНЕНИЕ 
// В структуре Color содержится 167 констант (146 цветов). Вообще говоря, в Visual Studio 12 можно управлять гораздо большим количеством цветов.
// Система программирования Visual Studio работает с так называемой RGB-моделью управления цветом. Согласно этой модели любой цвет может быть
// представлен как комбинация красного (Red), зеленого (Green) и синего (Blue) цветов. Долю каждого цвета записывают в один байт: 0 означает отсутствие 
// доли этого цвета, а максимум (255) — максимальное присутствие этого цвета в общей сумме, т.е. в результирующем цвете. Например, функция
// Color.FromArgb(int red, int green, int blue) возвращает цвет, базируясь на этой модели. Информация о цвете элементарной точки (пиксела) может быть
// записана в три байта, т. е. 24 бита. При этом говорят, что глубина цвета равна 24 разрядам. Максимальное число, которое можно записать в 24 бита,
// равно 224 – 1 = 16 777 215 или приблизительно 17 млн. Это означает, что при глубине цвета, равной 24, можно управлять 17 млн цветов (цветовых оттенков).