// Чтение текстового файла, содержащего каталог координат. 
// В данном каталоге каждая точка представлена четырьмя координатами: X, Y, U и V.
// Эти четыре числа могут располагаться как угодно: или по четыре координаты на одной строчке, или по две координаты в строке, 
// или "1 + 3", или в любых других комбинациях. Однако количество введенных координат должно быть кратно четырем. При этом в
// качестве разделителя целой и дробной частей пользователь может использовать точку и/или запятую. Между числами может быть
// сколько угодно пробельных символов и/или знаков табуляции ('\t'). Пользователь может пропускать пустые строки в середине каталога
// и/или в конце файла. Программа должна "понять" введенный текст и вывести распознанный каталог координат в текстовое поле экранной формы


namespace InputCoordinats
{
    public partial class Form1 : Form
    {
        // Объявляем массивы координат вне всех процедур, чтобы они были видны из любой процедуры:
        Double[] X, Y, U, V;

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            var AllText = string.Empty;
            try
            {
                var CurrentKatalog = System.IO.Directory.GetCurrentDirectory();
                // Читаем файл в строковую переменную:
                AllText = System.IO.File.ReadAllText(CurrentKatalog + @"\convert1.txt");
            }
            catch (System.IO.FileNotFoundException Situation)
            {
                MessageBox.Show(
                    "Нет такого файла" + "\n" + Situation.Message,
                    "Ошибка", MessageBoxButtons.OK,
                    MessageBoxIcon.Exclamation);
            }
            catch (Exception Situation)
            {
                MessageBox.Show(Situation.Message, "Ошибка",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }

            // Во всем тексте заменяем точки на запятые, т.е. можно вводить числа с точкой, а можно с запятой:
            AllText = AllText.Replace(".", ",");

            // В качестве сепаратора задаем: знаки табуляции '\t', 
            // перевод каретки '\r', '\n', '':
            Char[] Separator = { '\t', '\r', '\n', ' ' };
            var Koordinati = AllText.Split(Separator, StringSplitOptions.RemoveEmptyEntries);

            // Теперь в каждом элементе массива Koordinati() содержится одна координата
            var n = Koordinati.Length; // - количество элементов массива
            var z = n % 4; // % вычисляет остаток от деления целых чисел
            if (z != 0) MessageBox.Show("Количество исходных данных не кратно четырем");
            
            // Здесь уже можно определиться с размерностью массивов:
            X = new Double[n / 4]; U = new Double[n / 4];
            Y = new Double[n / 4]; V = new Double[n / 4];

            // Признаки успешного преобразования строки в число:
            Boolean A, B, C, D;
            var j = 0; // - счет чисел (элементов) в массиве Koordinati()
            for (var i = 0; i <= n / 4 - 1; i++)
            {
                // Преобразование из строки в число:
                A = Double.TryParse(Koordinati[j], out X[i]); j = j + 1;
                B = Double.TryParse(Koordinati[j], out Y[i]); j = j + 1;
                C = Double.TryParse(Koordinati[j], out U[i]); j = j + 1;
                D = Double.TryParse(Koordinati[j], out V[i]); j = j + 1;
                // Если хотя бы одно из преобразований метода TryParse ложно, то:
                if ((A && B && C && D) == false)
                    MessageBox.Show(String.Format(
                        "В строке {0} - не числовой ввод!", i + 1),
                        "Ошибка", MessageBoxButtons.OK,
                        MessageBoxIcon.Exclamation);
            }
            this.Text = String.Format("Количество точек = {0}", n / 4);
            textBox1.Multiline = true; textBox1.Clear();

            // В цикле добавляем строку координат в текстовое поле:
            for (var i = 0; i <= n / 4 - 1; i++)
            {
                textBox1.AppendText(String.Format("X = {0,5:F1};   " +
                "Y = {1,5:F1};   U = {2,5:F1};   V = {3,5:F1};" + "\r\n",
                                             X[i], Y[i], U[i], V[i]));
                // Использованный формат "{0,5:F1}" означает: взять нулевой выводимый элемент
                // и записать его с выравниванием вправо в следующих пяти позициях в формате
                // с фиксированной точкой и одним десятичным знаком после запятой.
            }
        }
    }
}


// Как видно из текста программы, процесс распознавания каталога координат происходит при обработке события загрузки формы.
// Вначале из текущей папки считываем в строковую переменную ВесьТекст содержимое файла convert1.txt и во всем тексте делаем
// контекстную замену точек на запятые, используя метод Replace. Далее используем очень эффективную и красивую функцию Split
// для копирования всего текста в строковый массив. Для этого зададимся в качестве сепаратора знаками табуляции '\t' (следствие
// нажатия клавиши <Tab>), невидимыми символами перевода каретки '\r' и '\n', а также пробельными символами ' '. Благодаря
// параметру RemoveEmptyEntries пустые строки в тексте игнорируются, и функция Split возвращает нам массив, в каждом элементе
// которого записана ровно одна координата (число). Теперь мы можем определенно выяснить количество вводимых данных и назначить,
// наконец, количество элементов в массивах координат. В следующем цикле преобразуем считанные из файла подстроки в числа с помощью
// функции TryParse. Эта функция возвращает true при успешном преобразовании. Поскольку мы имеем четыре числа в каждой строке (X, Y,
// U и V), получим четыре возврата: A, B, C и D. Логическое умножение (конъюнкция) этих булевых переменных ответит на вопрос, было ли
// хотя бы одно из четырех преобразований метода TryParse ложно. В этом случае организуем вывод соответствующего сообщения. 