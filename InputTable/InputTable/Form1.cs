// Программа предлагает пользователю заполнить таблицу телефонов его знакомых, сотрудников, родственников, любимых и т. д. После щелчка на кнопке
// Запись данная таблица записывается на диск в файл в формате XML. Для упрощения текста программы предусмотрена запись в один и тот же файл D:\tabl.xml.
// При последующих запусках данной программы таблица будет считываться из этого файла, и пользователь может продолжать редактирование таблицы 


using System.Data;

namespace InputTable
{
    public partial class Form1 : Form
    {
        DataTable Table;
        DataSet SetData;

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            this.Text = "Почти табличный редактор";
            button1.Text = "Запись";
            Table = new DataTable();
            SetData = new DataSet();

            if (System.IO.File.Exists(@"D:\tabl.xml") == true)
            {
                // Если xml-файл есть:
                SetData.ReadXml(@"D:\tabl.xml");

                // Содержимое DataSet в виде строки XML для отладки:
                var StrokaXML = SetData.GetXml();
                dataGridView1.DataMember = "Название таблицы";
                dataGridView1.DataSource = SetData;
            }
            else
            {
                // Если xml-файла нет:
                dataGridView1.DataSource = Table;

                // Заполняем "шапку" таблицы:
                Table.Columns.Add("ИМЕНА");
                Table.Columns.Add("НОМЕРА ТЕЛЕФОНОВ");

                // Добавляем объект Table в SetData
                SetData.Tables.Add(Table);
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Table.TableName = "Название таблицы";
            SetData.WriteXml(@"D:\tabl.xml");
        }
    }
}


// Как видно из текста программы, потребовалось всего лишь несколько строк кода для создания такой многофункциональной программы. Это стало возможным 
// благодаря использованию технологии ADO.NET. В начале класса объявлены два объекта этой технологии: набор данных DataSet и таблица данных DataTable.
// Объект класса DataSet является основным компонентом архитектуры ADO.NET. DataSet представляет кэш данных, расположенный в оперативной памяти. DataSet
// состоит из коллекции объектов класса DataTable. То есть, в один объект класса DataSet может входить несколько таблиц, а информацию о них мы можем записывать
// в файл на диск одним оператором WriteXml, соответственно читать — ReadXML. Таким образом, в этой программе мы имеем дело преимущественно с тремя объектами:
// DataSet — кэш данных, DataTable — представляет одну таблицу с данными и DataGridView — элемент управления для отображения данных.

// Сразу после инициализации компонентов формы мы обработали две ситуации. Если файла, в который мы сохраняем информацию о таблице, не существует, то назначаем в
// качестве источника данных DataSource для DataGrid объект класса DataTable и заполняем "шапку" таблицы, т. е. указываем названия колонок: "Имена" и "Номера
// телефонов", а затем добавляем объект DataTable в объект DataSet. Теперь пользователь видит пустую таблицу с двумя колонками и может ее заполнять. Если файл
// существует, то данные в объект DataSet отправляем из XML-файла (ReadXML). Здесь уже в качестве источника данных для сетки данных DataGrid указываем объект DataSet.
// При щелчке мышью на кнопке Запись (рис. 7.7) — событие button1.Click — происходит запись XML-файла на диск (WriteXml). 

// При использовании нами XML-файла для задачи программирования простейшего табличного редактора совсем необязательно вникать в его структуру, тем более что при выборе
// имени файла для сохранения также совершенно необязательно устанавливать расширение файла xml — файл с любым расширением будет читаться методом ReadXml, как XML-файл.
// Замечу, что данная программа может также являться инструментом для создания XML-файлов. Программист может иметь доступ к полям таблицы. Например, доступ к левой верхней
// ячейке (полю) таблицы можно получить, используя свойство объекта класса DataTable: Таблица.Rows.Item[0].Item[0].Однако запись этого поля, например, в последовательный
// файл будет некорректной даже при использовании дополнительной переменной из-за того, что технология ADO.NET предусматривает кэширование данных. Таким образом, чтение и
// запись данных для подобных таблиц следует организовывать только через методы объекта DataSet.

// При щелчке мышью на кнопке Запись (рис. 7.7) — событие button1.Click — происходит запись XML-файла на диск (WriteXml).