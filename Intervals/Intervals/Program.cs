// В этой задаче мы намереваемся сыграть роль как бы кассира в супермаркете, и если наш очередной покупатель купил товаров
// на сумму до 10 условных денежных единиц, то ему назначаем скидку 10 %, для суммы от 10 до 20 единиц полагается скидка 20 %.
// А при покупке на сумму свыше 20 единиц покупателю положена скидка 30 %. Таким образом, в этой задаче мы должны
// программировать следующие четыре интервала: 
// * cумма ≤ 0 → выход;
// * 0 < сумма ≤ 10 → скидка = 10 %;
// * 10 < сумма ≤ 20 → скидка = 20 %;
// * сумма > 20 → скидка = 30 %.
// Как оптимальным образом решать подобные задачи? Можно воспользоваться традиционным условием If — Else, но при этом программа будет
// выглядеть очень запутанно (такой запутанный клубок условий называют "спагетти"). Мы потратим много усилий на отладку этого "спагетти",
// а когда потребуется модернизировать данный участок программы (например, добавить еще один интервал), нам опять придется решать очередной ребус.
// Хорошим выходом из этой ситуации является использование оператора множественного выбора switch case. Такое решение вполне обеспечит наглядность,
// понятность программы. Заметим, кстати, что понятность написанной программы имеет сегодня гораздо больший приоритет, чем скорость работы написанной программы. 

// Итак, здесь четыре интервала.
Console.Title = "Программирование интервалов"; 
Console.Clear();

Console.WriteLine("Введите сумму за приобретенные товары:");

Single Summa, Skidka;

do // или for (; ;) - бесконечный цикл
{
    // Получаем значение очередной суммы от пользователя:
    var Stroka = Console.ReadLine();

    // Преобразуем введенное значение в число:
    Summa = Single.Parse(Stroka);
    if (0 < Summa && Summa <= 10)
    {
        // Второй интервал 0 < Сумма <= 10
        Skidka = 10; // 10% скидка
    }
    else if (10 < Summa && Summa <= 20)
    {
        // Третий интервал 10 < Сумма <= 20
        Skidka = 20; // 20% скидка
    }
    else if (Summa > 20)
    {
        // Четвертый интервал Сумма > 20
        Skidka = 30; // 30% скидка
    }
    else
    {
        // Первый интервал Сумма <= 0
        // Цен <= 0 не существует, поэтому выходим из цикла:
        Console.WriteLine("Сумма = {0}, поэтому выходим из программы.", Summa);
        Console.ReadKey();
        break;
    }
    Console.WriteLine("Сумма = {0}, поэтому скидка {1}%", Summa, Skidka);
} while (true); // конец бесконечного цикла


// Примечание. И вовсе не для "красного словца" мы только что сказали, что операторы else if обеспечивают эффективный программный код.
// Дело в том, что программирование множественного выбора, или, как его еще называют мультиветвления, обеспечивает наибольшую скорость
// выполнения написанного программного кода именно при использовании операторов else if. 