// Ввод данных через текстовое поле TextBox с проверкой типа методом TryParse
// -------------------------------------------------------------------------------
// Программа вводит через текстовое поле число, при щелчке на командной
// кнопке извлекает из него квадратный корень и выводит результат на метку
// label1. В случае ввода не числа сообщает пользователю об этом, выводя
// красным цветом предупреждение также на метку label1

using System.Security.Cryptography;

namespace Root
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            base.Text = "Извлечение квадратного корня";
            button1.Text = "Извлечь корень";
            textBox1.Clear();
            label1.Text = null; // или = String.Empty
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Single X; // - из этого числа будем извлекать корень
            // Преобразование из строковой переменной в Single:
            bool IsItanumber = Single.TryParse(
                textBox1.Text,
                System.Globalization.NumberStyles.Number,
                System.Globalization.NumberFormatInfo.CurrentInfo,
                out X);
            // Второй параметр — это разрешенный стиль числа (Integer,
            // шестнадцатеричное число, экспоненциальный вид числа и проч.).
            // Третий параметр форматирует значения на основе текущего языка
            // и региональных параметров из Панели управления — Язык и
            // региональные стандарты числа допустимого формата: метод
            // возвращает значение в переменную X
            if (IsItanumber == false)
            {
                // Если пользователь ввел не число:
                label1.Text = "Следует вводить числа!";
                label1.ForeColor = Color.Red;
                return; // - выход из процедуры или Return
            }
            // Извлечение корня с преобразованием в тип Single:
            var Y = (Single)Math.Sqrt(X);
            // или var Y = Convert.ToSingle(Math.Sqrt(X));
            label1.ForeColor = Color.Black;
            label1.Text = String.Format("Корень из {0} равен {1:F5}", X, Y);
        }
    }
}


// Здесь при обработке события "щелчок мышью" на кнопке Извлечь корень проводится проверка, число ли введено в текстовом поле. Проверка осуществляется с помощью
// функции TryParse. Первым параметром метода TryParse является анализируемое поле TextBox1.Text. Второй параметр — это разрешаемый для преобразования стиль числа,
// он может быть целого типа (Integer), шестнадцатеричным (HexNumber), представленным в экспоненциальном виде, и проч. Третий параметр указывает, на какой основе 
// формируется допустимый формат, — в нашем случае мы использовали CurrentInfo, т.е. на основе текущего языка и региональных параметров.

// Четвертый параметр метода TryParse возвращает результат преобразования. Кроме того, функция TryParse возвращает булеву переменную True или False, которая сообщает, успешно ли выполнено преобразование. Как видно из текста программы, если
// пользователь ввел не число (например, какие-либо буквы), то на метку Label1 выводится красным цветом текст "Следует вводить числа". Далее, поскольку ввод неправильный, организован выход из программы обработки события Button1_Click с помощью оператора return. 
// Если пользователь ввел все-таки число, то будет выполняться следующий оператор извлечения квадратного корня Math.Sqrt(X). Функция Math.Sqrt(X)возвращает значение типа double (двойной точности с плавающей запятой), которое приводим с помощью преобразования
// CType или Convert.ToSingle к переменной одинарной точности типа Single.

// Последней строчкой обработки события Button1_Click является формирование строки Label1.Text с использованием метода String.Format. Использованный формат "Корень из {0} равен {1:F5}" означает — взять нулевой выводимый элемент, т. е. переменную X, и записать
// эту переменную вместо фигурных скобок, после чего взять первый выводимый элемент, т. е. Y, и записать его вместо вторых фигурных скобок в формате с фиксированной точкой и пятью десятичными знаками после запятой.